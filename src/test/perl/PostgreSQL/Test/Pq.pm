
package PostgreSQL::Test::Pq;

use strict;
use warnings;
use Carp;

require Exporter;

our @ISA = qw(Exporter);

our $VERSION = '1.00';

my @routines = qw(
  PQclear PQconnectdb PQconsumeInput PQerrorMessage PQexec  PQfinish PQfname
  PQftype PQgetisnull PQgetResult PQgetvalue PQisBusy PQnfields PQntuples
  PQresultStatus PQsendQuery PQstatus PQchangePassword
);

# constants extracted from libpq-fe.h:

my @constants = qw (

  CONNECTION_OK
  CONNECTION_BAD
  CONNECTION_STARTED
  CONNECTION_MADE
  CONNECTION_AWAITING_RESPONSE
  CONNECTION_AUTH_OK
  CONNECTION_SETENV
  CONNECTION_SSL_STARTUP
  CONNECTION_NEEDED
  CONNECTION_CHECK_WRITABLE
  CONNECTION_CONSUME
  CONNECTION_GSS_STARTUP
  CONNECTION_CHECK_TARGET
  CONNECTION_CHECK_STANDBY

  PGRES_EMPTY_QUERY
  PGRES_COMMAND_OK
  PGRES_TUPLES_OK
  PGRES_COPY_OUT
  PGRES_COPY_IN
  PGRES_BAD_RESPONSE
  PGRES_NONFATAL_ERROR
  PGRES_FATAL_ERROR
  PGRES_COPY_BOTH
  PGRES_SINGLE_TUPLE
  PGRES_PIPELINE_SYNC
  PGRES_PIPELINE_ABORTED

  PQPING_OK
  PQPING_REJECT
  PQPING_NO_RESPONSE
  PQPING_NO_ATTEMPT

  PQTRANS_IDLE
  PQTRANS_ACTIVE
  PQTRANS_INTRANS
  PQTRANS_INERROR
  PQTRANS_UNKNOWN
				);

our @EXPORT  = (@routines, @constants);

# ConnStatusType:
use constant
{
	CONNECTION_OK => 0,
	CONNECTION_BAD => 1,
	CONNECTION_STARTED => 2,
	CONNECTION_MADE => 3,
	CONNECTION_AWAITING_RESPONSE => 4,
	CONNECTION_AUTH_OK => 5,
	CONNECTION_SETENV => 6,
	CONNECTION_SSL_STARTUP => 7,
	CONNECTION_NEEDED => 8,
	CONNECTION_CHECK_WRITABLE => 9,
	CONNECTION_CONSUME => 10,
	CONNECTION_GSS_STARTUP => 11,
	CONNECTION_CHECK_TARGET => 12,
	CONNECTION_CHECK_STANDBY => 13,
	CONNECTION_ALLOCATED => 14,
};

# ExecStatusType:
use constant
{
	PGRES_EMPTY_QUERY => 0,
	PGRES_COMMAND_OK => 1,
	PGRES_TUPLES_OK => 2,
	PGRES_COPY_OUT => 3,
	PGRES_COPY_IN => 4,
	PGRES_BAD_RESPONSE => 5,
	PGRES_NONFATAL_ERROR => 6,
	PGRES_FATAL_ERROR => 7,
	PGRES_COPY_BOTH => 8,
	PGRES_SINGLE_TUPLE => 9,
	PGRES_PIPELINE_SYNC => 10,
	PGRES_PIPELINE_ABORTED => 11,
	PGRES_TUPLES_CHUNK => 12,
};

# PGTransactionStatusType:
use constant
{
	PQTRANS_IDLE => 0,
	PQTRANS_ACTIVE => 1,
	PQTRANS_INTRANS => 2,
	PQTRANS_INERROR => 3,
	PQTRANS_UNKNOWN => 4,
};

# PGPing:
use constant
{
	PQPING_OK => 0,
	PQPING_REJECT => 1,
	PQPING_NO_RESPONSE => 2,
	PQPING_NO_ATTEMPT => 3,
};


require XSLoader;
XSLoader::load('PostgreSQL::Test::Pq', );

1;
